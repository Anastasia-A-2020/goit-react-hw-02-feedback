{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Statistics.js","components/Section/Section.js","components/Notification/Notification.js","App.js","reportWebVitals.js","index.js"],"names":["FeedbackOptions","buttons","onLeaveFeedback","Object","keys","map","button","name","onClick","Statistics","good","neutral","bad","total","positivePercentage","Section","title","children","Notification","App","state","handleIncrement","e","currentTarget","setState","prevState","countTotalFeedback","values","reduce","value","countPositiveFeedbackPercentage","Math","round","this","totalFeedback","message","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iTAyBeA,EArBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,8BACGC,OAAOC,KAAKH,GAASI,KAAI,SAACC,GAAD,OACxB,wBAAqBC,KAAMD,EAAQE,QAASN,EAA5C,SACGI,GADUA,SCkBNG,EAvBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,gCACE,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,EAAX,OACA,mDAEGC,EAFH,YCMSC,EAdC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,qCACE,6BAAKD,IACJC,MCFQC,EAJM,WACnB,OAAO,mDCwEMC,G,kNAjEbC,MAAQ,CACNV,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPS,gBAAkB,SAACC,GACjB,IAAMf,EAAOe,EAAEC,cAAchB,KAC7B,EAAKiB,UAAS,SAACC,GAAD,sBACXlB,EAAOkB,EAAUlB,GAAQ,O,EAI9BmB,mBAAqB,WAGnB,OAFwBvB,OAAOwB,OAAO,EAAKP,OAEpBQ,QAAO,SAACf,EAAOgB,GAAR,OAAkBhB,EAAQgB,IAAO,I,EAGjEC,gCAAkC,WAChC,IAAMjB,EAAQ,EAAKa,qBACXhB,EAAS,EAAKU,MAAdV,KAER,OAAc,IAAVG,EACK,EAGFkB,KAAKC,MAAOtB,EAAOG,EAAS,M,4CAGrC,WACE,MAA+BoB,KAAKb,MAA5BV,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACjBsB,EAAgBD,KAAKP,qBAE3B,OACE,qCACE,cAAC,EAAD,CAASV,MAAM,wBAAf,SACE,cAAC,EAAD,CACEf,QAASgC,KAAKb,MACdlB,gBAAiB+B,KAAKZ,oBAIzBa,EAAgB,EACf,cAAC,EAAD,CAASlB,MAAM,aAAf,SACE,cAAC,EAAD,CACEN,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOoB,KAAKP,qBACZZ,mBACEmB,KAAKH,kCACDG,KAAKH,kCACL,MAKV,cAAC,EAAD,CAAcK,QAAQ,6B,GA3DdC,cCKHC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f7ee0ca6.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./FeedbackOptions.module.css\";\n\nconst FeedbackOptions = ({ buttons, onLeaveFeedback }) => {\n  return (\n    <div>\n      {Object.keys(buttons).map((button) => (\n        <button key={button} name={button} onClick={onLeaveFeedback}>\n          {button}\n        </button>\n      ))}\n    </div>\n  );\n};\n\nFeedbackOptions.propTypes = {\n  buttons: PropTypes.shape({\n    good: PropTypes.number.isRequired,\n    neutral: PropTypes.number.isRequired,\n    bad: PropTypes.number.isRequired,\n  }).isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <div>\n      <p>Good: {good}</p>\n      <p>Neutral: {neutral}</p>\n      <p>Bad: {bad}</p>\n      <p>Total: {total} </p>\n      <p>\n        Positive feedback:\n        {positivePercentage} %\n      </p>\n    </div>\n  );\n};\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import PropTypes from \"prop-types\";\n\nconst Section = ({ title, children }) => {\n  return (\n    <>\n      <h1>{title}</h1>\n      {children}\n    </>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Section;\n","const Notification = () => {\n  return <p>No feedback given</p>;\n};\n\nexport default Notification;\n","import { Component } from \"react\";\nimport FeedbackOptions from \"./components/FeedbackOptions\";\nimport Statistics from \"./components/Statistics\";\nimport Section from \"./components/Section\";\nimport Notification from \"./components/Notification\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleIncrement = (e) => {\n    const name = e.currentTarget.name;\n    this.setState((prevState) => ({\n      [name]: prevState[name] + 1,\n    }));\n  };\n\n  countTotalFeedback = () => {\n    const feedbacksValues = Object.values(this.state);\n\n    return feedbacksValues.reduce((total, value) => total + value, 0);\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const total = this.countTotalFeedback();\n    const { good } = this.state;\n\n    if (total === 0) {\n      return 0;\n    }\n\n    return Math.round((good / total) * 100);\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const totalFeedback = this.countTotalFeedback();\n\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            buttons={this.state}\n            onLeaveFeedback={this.handleIncrement}\n          />\n        </Section>\n\n        {totalFeedback > 0 ? (\n          <Section title=\"Statistics\">\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={\n                this.countPositiveFeedbackPercentage()\n                  ? this.countPositiveFeedbackPercentage()\n                  : 0\n              }\n            />\n          </Section>\n        ) : (\n          <Notification message=\"No feedback given\" />\n        )}\n      </>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}